@page "/popup.html"
@using CPExtension.Models
@using CPExtension.Services

@inject EyedropperInterop Eyedropper
@inject HttpClient http
@implements IDisposable


<div class="container p-3">
    <div class="text-center mb-4">
        <h4>Color Picker</h4>
    </div>

    <button class="btn btn-primary w-100 mb-3" @onclick="PickColor">
        <i class="bi-eyedropper"></i> Pick Color
    </button>

    @if (!string.IsNullOrEmpty(SelectedColor))
    {
        <div class="card mt-3">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="color-preview me-3" 
                         style="width:40px;height:40px;background:@SelectedColor">
                    </div>
                    <div>
                        <h5 class="card-title mb-0 found-color-text">@SelectedColor</h5>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (matchingFilaments != null)
    {
        <div class="mt-4">
            <h5>Matching Filaments:</h5>

            @foreach (var filament in matchingFilaments)
            {
                <div class="card mb-2 bg-light">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-3">
                                <div class="color-preview"
                                     style="background:#@filament.HexColor; height:60px">
                                </div>
                            </div>
                            <div class="col-9">
                                <h6>@filament.ColorName</h6>
                                <p class="mb-1">
                                    <strong>@filament.Manufacturer?.Name</strong> |
                                    @filament.Material?.Name
                                </p>

                                @if (!string.IsNullOrEmpty(filament.MfrPurchaseLink))
                                {
                                    <a href="@filament.MfrPurchaseLink" target="_blank"
                                       class="btn btn-sm btn-outline-success mt-1">
                                        Purchase
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">
            @ErrorMessage
        </div>
    }
</div>

@code {
    private ElementReference dropperButton;
    private string SelectedColor { get; set; }
    private string ErrorMessage { get; set; }
    private bool isLoading = true;
    private List<FilamentSwatch> matchingFilaments;
    private FilamentService FilamentService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FilamentService = new FilamentService();
        await FilamentService.InitializeAsync();
        isLoading = false;
    }

    private async Task PickColor()
    {
        ErrorMessage = null;
        SelectedColor = null;
        matchingFilaments = null;

        try
        {
            SelectedColor = await Eyedropper.OpenEyeDropperAsync();

            if (!string.IsNullOrEmpty(SelectedColor))
            {
                // Remove # if present
                var cleanHex = SelectedColor.Replace("#", "");
                matchingFilaments = FilamentService.FindClosestFilaments(cleanHex, 5);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}